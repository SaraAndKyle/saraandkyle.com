{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AppContainer","styled","div","_templateObject","BusinessCard","section","_templateObject2","Heading","h1","_templateObject3","SubHeading","h2","_templateObject4","Action","a","_templateObject5","And","props","react_default","createElement","StyledAnd","_templateObject6","HiddenAnd","_templateObject7","App","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2oDAGA,IAAMA,EAAeC,IAAOC,IAAVC,KAOZC,EAAeH,IAAOI,QAAVC,KAIZC,EAAUN,IAAOO,GAAVC,KAOPC,EAAaT,IAAOU,GAAVC,KASVC,EAASZ,IAAOa,EAAVC,KAgBNC,EAAM,SAAAC,GAAK,OAAIC,EAAAJ,EAAAK,cAAA,MAASF,EAAT,QAEfG,EAAYnB,YAAOe,EAAPf,CAAHoB,KAWTC,EAAYrB,YAAOe,EAAPf,CAAHsB,KAyBAC,mLAZX,OACEN,EAAAJ,EAAAK,cAACnB,EAAD,KACEkB,EAAAJ,EAAAK,cAACf,EAAD,KACEc,EAAAJ,EAAAK,cAACZ,EAAD,aAAcW,EAAAJ,EAAAK,cAACC,EAAD,MAAd,SACAF,EAAAJ,EAAAK,cAACT,EAAD,eAAmBQ,EAAAJ,EAAAK,cAACG,EAAD,MAAnB,gBACAJ,EAAAJ,EAAAK,cAACN,EAAD,CAAQY,KAAK,+BAAb,uBAPQC,aC1DEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAJ,EAAAK,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6a9fd4b2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from \"styled-components\";\n\nconst AppContainer = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  min-height: 100vh;\n`\n\nconst BusinessCard = styled.section`\n  text-align: center;\n`\n\nconst Heading = styled.h1`\n  font-size: 3rem;\n  font-weight: 400;\n  margin: 0;\n  text-transform: uppercase;\n`\n  \nconst SubHeading = styled.h2`\n  font-weight: 100;\n  line-height: 6rem;\n  margin: 0;\n  text-transform: uppercase;\n  transform: translateY(-8rem);\n  word-spacing: 100vw;\n`\n\nconst Action = styled.a`\n  background-color: #333;\n  color: #fff;\n  display: inline-block;\n  font-weight: 700;\n  opacity: 0.8;\n  padding: 0.4rem 2rem;\n  text-decoration: none;\n  text-transform: uppercase;\n  transition: opacity 0.4s;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst And = props => <div {...props}>and</div>\n\nconst StyledAnd = styled(And)`\n  background-color: rgba(0, 126, 163, 1);\n  color: #fff;\n  display: inline-block;\n  font-size: 1.5rem;\n  line-height: 4rem;\n  margin: auto;\n  vertical-align: top;\n  width: 4rem;\n`\n\nconst HiddenAnd = styled(And)`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0,0,0,0);\n  border: 0;\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <AppContainer>\n        <BusinessCard>\n          <Heading>Sara <StyledAnd/> Kyle</Heading>\n          <SubHeading>Design <HiddenAnd/> Development</SubHeading>\n          <Action href=\"mailto:sara@saraandkyle.com\">Contact Us</Action>\n        </BusinessCard>\n      </AppContainer>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}